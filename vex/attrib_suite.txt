= Чтение атрибутов =

#type: vexsuite


@suite

== Без проверки существования == (unchecked)

Данные функции возвращают значение атрибута, если указанный элемент (detail переменная/примитив/точка/вершина) существует и имеет указанный атрибут, иначе нуль или пустое значение.

Если вам требуется различать значение атрибута фактически равное нулю или пустое по отношению к функции, возвращающей нуль или пустое значение, потому что атрибут не существует, используйте указанные ниже [версии с проверкой|#checked].

::[Vex:attrib]
::[Vex:detail]
::[Vex:prim]
::[Vex:point]
::[Vex:vertex]


== С проверкой существования == (checked)

Данные функции принимают дополнительный аргумент. Функции будут перезаписывать целочисленную переменную, которую вы передадите этому аргументу,  единицей (`1`), если чтение прошло успешно или `0` в противном случае. Это позволяет различать, когда функция возвращает 0, потому что значение атрибута фактически равно нулю или потому, что чтение не удалось.

Если в вашем коде не имеет значения, существует ли атрибут, использование указанных выше [версий без проверки|#unchecked] будет проще, т.к. не требуется создание переменной для перезаписи.

::[Vex:getattrib]
::[Vex:detailattrib]
::[Vex:primattrib]
::[Vex:pointattrib]
::[Vex:vertexattrib]


@examples

{{{
#!vex
// Получаем значение атрибута "uv" класса detail.
vector uv = detail("defgeo.bgeo", "uv");
}}}

{{{
#!vex
// Получаем значение атрибута "Cd" примитива с номером 7
// in the SOP specified by the path "/obj/geo1/color1" (Houdini
// only)
vector clr = prim("op:/obj/geo1/color1", "Cd", 7);
}}}

{{{
#!vex
// Получаем позицию 3 точки в "defgeo.bgeo"
vector pos = point("defgeo.bgeo", "P", 3);
}}}

{{{
#!vex
// Получаем значение атрибута "uv" из второй вершины третьего примитива в файле "defgeo.bgeo"
vector uv = vertex("defgeo.bgeo", "uv", 3, 2);
}}}

:bubble:
    #dir: right
    #display: gray
    [English version of this page|http://www.sidefx.com/docs/houdini16.5/vex/attrib_suite]
